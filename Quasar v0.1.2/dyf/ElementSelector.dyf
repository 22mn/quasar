<Workspace Version="1.3.2.2480" X="-141.094" Y="200.438" zoom="0.8425" ScaleFactor="1" Name="ElementSelector" Description="This UI node is to select element by category and additionally can filter out by parameter and its valule." ID="bfd1a96b-aec6-41c9-b5d0-d85123b286b4" Category="Quasar.ElementUtility">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="db8287c4-0603-4003-9cae-1483fad4a393" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="392.148479848275" y="16.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements;" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="2564dff4-e51b-418d-846f-03c59cea8d2d" type="PythonNodeModels.PythonNode" nickname="Python Script" x="241.95518566269" y="100.795200709782" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="true" inputcount="0">
      <Script># dynamo version - 1.3.0
# author - min.naung/mgjean https://twentytwo.space/contact/

import clr,sys
clr.AddReference('RevitAPI')
clr.AddReference("RevitServices")
clr.AddReference("System.Windows.Forms")
clr.AddReference("System.Drawing")


sys.path.append(r"C:\Program Files (x86)\IronPython 2.7\Lib")

import os,System

version = ["2.0","1.3","1.2","1.1","1.0","0.9","0.8","0.7"]

appdata = os.getenv("AppData");
qpath = r"\Dynamo\Dynamo Revit\%s\packages\Quasar"

for i in version:
	if os.path.exists(os.path.join(appdata+qpath %i)):
		ipath = os.path.join(appdata+qpath %i)


from System.Collections.Generic import List
from System.Windows.Forms import Application, Button,ComboBox,CheckBox, Form as _Form, Label, TextBox, MessageBox, MessageBoxButtons, MessageBoxIcon
from System.Drawing import Font, Icon, Point as _Point, FontStyle,Size, Color as _Color

from Autodesk.Revit.DB import *
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument
uidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument

DictNumericRules = {"greater than":FilterNumericGreater(),"less than":FilterNumericLess(),
"greater than or equal":FilterNumericGreaterOrEqual(),"less than or equal":FilterNumericLessOrEqual(),
"equals":FilterNumericEquals()}
DictStringRules = {"begins with":FilterStringBeginsWith(),"contains":FilterStringContains(),
"ends with":FilterStringEndsWith(),"equals":FilterStringEquals(),"greater":FilterStringGreater(),
"greater than or equal":FilterStringGreaterOrEqual(),"less than or equal":FilterStringLessOrEqual(),
"less than":FilterStringLess()}

numeric_rules = [i for i in DictNumericRules.keys()]
string_rules=[i for i in DictStringRules.keys()]
pure = []
res = []
name = []
string_params = []
numeric_params = []
collect = FilteredElementCollector(doc,doc.ActiveView.Id).ToElements()
cate = [i.Category.Name for i in collect if i.Category]
[pure.append(i) for i in cate if i not in pure]
elems = ''

for i in doc.Settings.Categories:
	if i.Name in pure:
		res.append(i)	

name = tuple([i.Name for i in res])
ans = "Not Selected!"
class DropDownForm(_Form):
	def __init__(self):
		self.Text = "QuasarÂ®"
		self.Icon = Icon(r"%s\extra\icon.ico" %ipath)
		font = Font("Georgia", 10 )
		fontone = Font("Georgia", 9 )
		fonttwo = Font("Georgia", 9,FontStyle.Bold )
		
		self.cb = ComboBox()
		self.cb.Size = Size(245,100)
		self.cb.Location = _Point(20,20)
		self.cb.Text = "Select By Category"
		self.cb.Font = font
		self.cb.Items.AddRange(name)
		
		self.chkbox = CheckBox()
		self.chkbox.Location = _Point(90,60)
		self.chkbox.Size = Size(120,20)
		self.chkbox.Font = fonttwo
		self.chkbox.Text = "  Add Filter"
		self.chkbox.Enabled = False
		
		self.txtparam = ComboBox()
		self.txtparam.Font = fontone
		self.txtparam.Size = Size(160,100)
		self.txtparam.Location = _Point(60,85)
		self.txtparam.Enabled = False
		
		self.cb_rules = ComboBox()
		self.cb_rules.Size = Size(160,100)
		self.cb_rules.Location = _Point(60,120)
		self.cb_rules.Font = fontone
		self.cb_rules.Enabled = False
		
		self.txtvalue = TextBox()
		self.txtvalue.Font = fontone
		self.txtvalue.ForeColor = _Color.Gray
		self.txtvalue.Size = Size(160,100)
		self.txtvalue.Location = _Point(60,155)
		self.txtvalue.Enabled = False
		
		self.okbtn = Button()
		self.okbtn.Font = fonttwo
		self.okbtn.Text = "Ok"
		self.okbtn.Location = _Point(100,190)
		
		self.Controls.Add(self.okbtn)
		self.Controls.Add(self.txtvalue)
		self.Controls.Add(self.txtparam)
		self.Controls.Add(self.chkbox)
		self.Controls.Add(self.cb_rules)
		self.Controls.Add(self.cb)
		
		self.txtparam.SelectedIndexChanged += self.param_value_changed
		self.cb.SelectedIndexChanged += self.cate_value_changed
		self.txtvalue.GotFocus += self.tb_focus
		self.okbtn.Click += self.ok_click
		self.chkbox.CheckedChanged += self.chkstate
				
		self.CenterToScreen()
	
	def ok_click(self, sender, event):
		
		global ans, elems
		for i in res:
			if self.cb.SelectedItem == i.Name:
				elems = FilteredElementCollector(doc,doc.ActiveView.Id).OfCategoryId(i.Id).WhereElementIsNotElementType().ToElements();
					
				if str(self.chkbox.CheckState) == "Checked":
					builtInParams = [i for i in System.Enum.GetValues(BuiltInParameter)];
					bparamName = [c for c in builtInParams if elems[0].get_Parameter(c) and elems[0].get_Parameter(c).Definition.Name == str(self.txtparam.SelectedItem)][0]
						
						
					bipname = eval("BuiltInParameter."+str(bparamName));
					pvp = ParameterValueProvider(ElementId(bipname));
						
					if self.txtparam.SelectedItem in numeric_params:
						val = int(self.txtvalue.Text)/304.8;
						eval_rule = DictNumericRules[self.cb_rules.SelectedItem];
						rule = FilterDoubleRule(pvp,eval_rule,val,1E-6);
					if self.txtparam.SelectedItem in string_params:
						val = self.txtvalue.Text;
						eval_rule = DictStringRules[self.cb_rules.SelectedItem];
						rule = FilterStringRule(pvp,eval_rule,val,False);
								
					filter_rule = ElementParameterFilter(rule)
					prelist=[]
					for i in elems:
						prelist.append(i.Id);
						Icollection = List[ElementId](prelist);
			
					elems = FilteredElementCollector(doc,Icollection).WherePasses(filter_rule).ToElements();
						
					#MessageBox.Show("Incorrect value detected.","Error Message!",MessageBoxButtons.OK, MessageBoxIcon.Information)
			
		selected = uidoc.Selection
		icollect = List[ElementId]([i.Id for i in elems])
		selected.SetElementIds(icollect);
						
		ans = elems
		self.Close()
								
		#MessageBox.Show("Incorrect value detected.","Error Message!",MessageBoxButtons.OK, MessageBoxIcon.Information)


	def param_value_changed(self,sender,event):
		if sender.Text == "Parameter Value":
			return;
		elif sender.Text in numeric_params:
			self.cb_rules.Items.AddRange(tuple(numeric_rules));
		else:
			self.cb_rules.Items.AddRange(tuple(string_rules));

	def cate_value_changed(self,sender,event):
		if sender.Text == "Select By Category":
			return;
		self.chkbox.Enabled = True
		self.txtparam.Text = "Parameter Name"
		self.cb_rules.Text = "Operator"
		self.txtvalue.Text = "Parameter Value ..."

	def tb_focus(self, sender, event):
		sender.Text = ""
		sender.ForeColor = _Color.Black
	
	def chkstate(self, sender, event):
		global string_params,numeric_params
		if str(sender.CheckState) == "Checked":
			self.txtparam.Enabled = True
			self.cb_rules.Enabled = True
			self.txtvalue.Enabled = True
			for i in res:
				if self.cb.SelectedItem == i.Name:
					elem = FilteredElementCollector(doc,doc.ActiveView.Id).OfCategoryId(i.Id).WhereElementIsNotElementType().ToElements()[0]
			params = [e.Definition.Name.ToString() for e in elem.Parameters if str(e.StorageType) != "ElementId"]
			string_params = [e.Definition.Name.ToString() for e in elem.Parameters if str(e.StorageType) == "String"]
			numeric_params = [e.Definition.Name.ToString() for e in elem.Parameters if str(e.StorageType) == "Double" or str(e.StorageType) == "Integer"]
			self.txtparam.Items.AddRange(tuple(params))
			
		else:
			self.txtparam.Enabled = False
			self.cb_rules.Enabled = False
			self.cb_rules.SelectedIndex = -1
			self.txtvalue.Enabled = False

	
Application.Run(DropDownForm())

OUT = ans</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="2564dff4-e51b-418d-846f-03c59cea8d2d" start_index="0" end="db8287c4-0603-4003-9cae-1483fad4a393" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
</Workspace>