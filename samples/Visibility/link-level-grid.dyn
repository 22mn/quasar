<Workspace Version="1.3.2.2480" X="120.816" Y="70.236" zoom="0.8425" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="False">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="67bee5c9-6bad-45bc-96fa-e9adfa366b80" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="ElementGraphics.LinkLevelGrid" x="251.054005934718" y="165.227299703264" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="true" isPinned="true" assembly="..\..\..\..\AppData\Roaming\Dynamo\Dynamo Revit\1.3\packages\Quasar\bin\Quasar.dll" function="Quasar.ElementGraphics.LinkLevelGrid@bool">
      <PortInfo index="0" default="True" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <CoreNodeModels.Input.BoolSelector guid="e39ad757-0b6d-4cf9-8192-7c6f474f5c26" type="CoreNodeModels.Input.BoolSelector" nickname="Boolean" x="68.3489614243324" y="166.366765578635" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.Boolean>True</System.Boolean>
    </CoreNodeModels.Input.BoolSelector>
    <PythonNodeModels.PythonNode guid="47c88c85-967f-422d-82b3-379afd1a7433" type="PythonNodeModels.PythonNode" nickname="Python Script" x="288.645697329377" y="322.093768545994" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script># dynamo version - 1.3.2
# author - min.naung

import clr
clr.AddReference("RevitAPI")
clr.AddReference("RevitServices")
import System

from System.Collections.Generic import List
from Autodesk.Revit.DB import *
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# document manager
doc = DocumentManager.Instance.CurrentDBDocument
# start transaction
TransactionManager.Instance.EnsureInTransaction(doc);

# active view
active_view = doc.ActiveView
# filter name "can name anything"
ifilter = "LinkLevelGrid_QuasarPackage"
found = False

# input[0] boolean
hide = False if IN[0] else True

# collect all filter elements
allFilters = FilteredElementCollector(doc).OfClass(FilterElement).ToElements()

# get filters from current view
viewFilters = active_view.GetFilters();
# collect filters' names
viewFiltersName = [doc.GetElement(i).Name.ToString() for i in viewFilters]

# loop each filter
for fter in allFilters:
	# filter already have in doc but not in current view
	if ifilter == fter.Name.ToString() and ifilter not in viewFiltersName:
		# add filter
		active_view.AddFilter(fter.Id)
		# set filter visibility
		active_view.SetFilterVisibility(fter.Id, hide);
		found = True
	# filter already have in doc and current view
	if ifilter == fter.Name.ToString() and ifilter in viewFiltersName:
		# set filter visibility
		active_view.SetFilterVisibility(fter.Id, hide);
		found = True
		
# if filter not found in doc
if not found:
	# all grids in doc
	grids = FilteredElementCollector(doc).OfClass(Grid).ToElements()
	# all levels in doc
	levels = FilteredElementCollector(doc).OfClass(Level).ToElements()
	# collect category id from grid and level
	CateIds = List[ElementId]([grids[0].Category.Id,levels[0].Category.Id])
	
	# type ids from grids 
	gridTypeIds = set([i.GetTypeId() for i in grids])
	# type ids from levels
	levelTypeIds = set([i.GetTypeId() for i in levels])
	
	# get grid type element
	type_elems = [doc.GetElement(i) for i in gridTypeIds]
	# get level type element
	type_elems.extend([doc.GetElement(l) for l in levelTypeIds])
	
	# loop type elements
	for elem in type_elems:
		# if "_quasar" not include in type name
		if not "_quasar" in elem.LookupParameter("Type Name").AsString():
			# add "_quasar" in type name
			elem.Name = elem.LookupParameter("Type Name").AsString() + "_quasar";
	# get type names
	type_names = [i.LookupParameter("Type Name").AsString() for i in type_elems]
	# type name parameter id
	paramId = type_elems[0].LookupParameter("Type Name").Id
	# create a "not ends with" filter rule
	notendswith = ParameterFilterRuleFactory.CreateNotEndsWithRule(paramId,"_quasar",False)
	# create parameter filter element
	paramFilterElem = ParameterFilterElement.Create(doc, ifilter,CateIds,[notendswith])
	# set filter overrides (same with add filter to current)
	active_view.SetFilterOverrides(paramFilterElem.Id, OverrideGraphicSettings())
	# set filter visibility
	active_view.SetFilterVisibility(paramFilterElem.Id, hide)
	
# transaction done
TransactionManager.Instance.TransactionTaskDone()

# output
OUT = "DONE!"

</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="e39ad757-0b6d-4cf9-8192-7c6f474f5c26" start_index="0" end="67bee5c9-6bad-45bc-96fa-e9adfa366b80" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e39ad757-0b6d-4cf9-8192-7c6f474f5c26" start_index="0" end="47c88c85-967f-422d-82b3-379afd1a7433" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>