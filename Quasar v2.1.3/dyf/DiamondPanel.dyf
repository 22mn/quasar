<Workspace Version="1.3.2.2480" X="-160.601823910402" Y="142.552077268404" zoom="0.931811528498331" ScaleFactor="1" Name="DiamondPanel" Description="Surface divide into diamond and triangle shapes by given U, V division value." ID="4cb7cd42-fffa-4557-a3e5-7e5e74e0aed1" Category="Quasar.DynamoNodes">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="1e81a8f3-e80e-4326-8382-b71318c77461" type="PythonNodeModels.PythonNode" nickname="Python Script" x="250" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script># dynamo version 1.3.0
# author - min.naung@mgjean https://twentytwo.space/contact/
import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

surface = IN[0];
upanel = IN[1];
vpanel = IN[2];

DiamondPanel = [];
TrianglePanel = []; 
ustep = 1.0/upanel;
vstep = 1.0/vpanel;
for i in range(0,upanel+1,1):
	for j in range(0,vpanel+1,1):
		if (i+j) % 2 == 0:
			pointA = surface.PointAtParameter(0,0);
			pointB = surface.PointAtParameter(0,0);
			pointC = surface.PointAtParameter(0,0);
			pointD = surface.PointAtParameter(0,0);

			if i &gt; 0:
				pointA = surface.PointAtParameter((i-1)*ustep, j*vstep);

			else:
				pointB = surface.PointAtParameter(i * ustep, j*vstep)

			if j &gt; 0:
				pointB = surface.PointAtParameter(i * ustep, (j-1) * vstep);
			else:
				pointB = surface.PointAtParameter(i *ustep, j * vstep);

			if i &lt; upanel:
				pointC = surface.PointAtParameter((i+1) * ustep, j * vstep);

			else:
				pointC = surface.PointAtParameter(i * ustep, j* vstep);

			if j &lt;= (vpanel - 1):
				pointD = surface.PointAtParameter(i*ustep, (j+1)*vstep);
			else:
				pointD = surface.PointAtParameter(i * ustep, j * vstep);

			if i &gt; 0 and j &gt; 0 and i &lt; upanel and j &lt;= (vpanel - 1):

				points = [];
				points.append(pointA);
				points.append(pointB);
				points.append(pointC);
				points.append(pointD);
		
				panel = Surface.ByPerimeterPoints(points);
		
				DiamondPanel.append(panel);
		
				
			if i &gt; 0 and j &gt; 0 and i &lt; upanel and j &lt; vpanel:
				points = [];
			else:
				if i == 0 and j == 0:
					points = []
					points.append(pointB);
					points.append(pointC);
					points.append(pointD);

					panel = Surface.ByPerimeterPoints(points);
					TrianglePanel.append(panel);
				
				if i == 0 and j == vpanel:
					points = []
					points.append(pointB);
					points.append(pointC);
					points.append(pointD);

					panel = Surface.ByPerimeterPoints(points);
					TrianglePanel.append(panel);
				
				if i == upanel and j == 0:
					points = []
					points.append(pointC);
					points.append(pointD);
					points.append(pointA);

					panel = Surface.ByPerimeterPoints(points);
					TrianglePanel.append(panel);

				if i == upanel and j == vpanel:
					points = []
					points.append(pointA);
					points.append(pointB);
					points.append(pointC);

					panel = Surface.ByPerimeterPoints(points);
					TrianglePanel.append(panel);
				
				if i == 0 and j &gt; 0 and j &lt; vpanel:
					points = []
					points.append(pointB);
					points.append(pointC);
					points.append(pointD);

					panel = Surface.ByPerimeterPoints(points);
					TrianglePanel.append(panel);

				if i == upanel and j &gt; 0 and j &lt; vpanel:
					points = []
					points.append(pointA);
					points.append(pointB);
					points.append(pointD);

					panel = Surface.ByPerimeterPoints(points);
					TrianglePanel.append(panel);

				if j==0 and i &gt; 0 and j &lt; vpanel:
					points = []
					points.append(pointA);
					points.append(pointC);
					points.append(pointD);

					panel = Surface.ByPerimeterPoints(points);
					TrianglePanel.append(panel);

				if j == vpanel and i &gt; 0 and i &lt; upanel:
					points = []
					points.append(pointA);
					points.append(pointB);
					points.append(pointC);

					panel = Surface.ByPerimeterPoints(points);
					TrianglePanel.append(panel);

OUT = DiamondPanel,TrianglePanel</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="52f0e1ea-f83b-4210-905f-de1cb3749739" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-47.2" y="-5.60000000000002" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="// surface geometry&#xD;&#xA;Surface_" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="acdc8e2b-421c-46ea-8ebf-fd8f7e28ee94" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-55.1999999999999" y="76.4" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="// Udivision double&#xD;&#xA;UDivision" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="1be1de5e-1f8d-4954-9cb3-2015d73e9b91" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="594.893718917476" y="79.8444725403859" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="// diamond panels&#xD;&#xA;DiamondPanel" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="43f3e166-df88-415d-95b6-1df080229236" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-9.60000000000002" y="190.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="// Vdivision double&#xD;&#xA;VDivision" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="9166d73b-ab1f-49f7-a1e2-31bf950f9ee6" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="445.71281426429" y="101.907537757569" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="i[0];&#xA;i[1];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="13123ff6-93d6-402c-818a-37f3c9b6bd00" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="594.757423535563" y="164.676995334976" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="// triangle panels&#xD;&#xA;TiranglePanel" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="1e81a8f3-e80e-4326-8382-b71318c77461" start_index="0" end="9166d73b-ab1f-49f7-a1e2-31bf950f9ee6" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="52f0e1ea-f83b-4210-905f-de1cb3749739" start_index="0" end="1e81a8f3-e80e-4326-8382-b71318c77461" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="acdc8e2b-421c-46ea-8ebf-fd8f7e28ee94" start_index="0" end="1e81a8f3-e80e-4326-8382-b71318c77461" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="43f3e166-df88-415d-95b6-1df080229236" start_index="0" end="1e81a8f3-e80e-4326-8382-b71318c77461" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9166d73b-ab1f-49f7-a1e2-31bf950f9ee6" start_index="0" end="1be1de5e-1f8d-4954-9cb3-2015d73e9b91" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9166d73b-ab1f-49f7-a1e2-31bf950f9ee6" start_index="1" end="13123ff6-93d6-402c-818a-37f3c9b6bd00" end_index="0" portType="0" />
  </Connectors>
  <Notes>
    <Dynamo.Graph.Notes.NoteModel guid="29de9261-bb42-4af5-bde0-06a2894a81e9" text="IN[0] = Surface&#xD;&#xA;IN[1] = Udivision&#xD;&#xA;IN[2] = Vdivision" x="252.780339958235" y="-64.015479693341" />
  </Notes>
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-12.1347256916589" eyeY="23.2021195032563" eyeZ="18.1622078648998" lookX="4.32888950166826" lookY="-19.1261263545082" lookZ="-20.2107606563943" upX="0.105982263576517" upY="0.862513669207257" upZ="-0.494811004564199" />
  </Cameras>
</Workspace>