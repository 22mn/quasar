<Workspace Version="1.3.2.2480" X="-288.472248014988" Y="17.8360747229588" zoom="1.41036790236992" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="c0435390-ff88-4c3a-a8d7-933928038d1b" type="PythonNodeModels.PythonNode" nickname="RoomsCollectorUI" x="293.92824611539" y="116.917603822213" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="0">
      <Script>import clr,sys
sys.path.append(r"C:\Program Files (x86)\IronPython 2.7\Lib")
import os, System

clr.AddReference("RevitAPI")
clr.AddReference("RevitServices")
from Autodesk.Revit.DB import *
from RevitServices.Persistence import DocumentManager

clr.AddReference("System.Windows.Forms")
clr.AddReference("System.Drawing")


from System.Collections.Generic import List
from System.Windows.Forms import (Application, Button, ComboBox, CheckBox, Form as _Form,
CheckedListBox,Padding,FormBorderStyle, SelectionMode,Label, MessageBox,MessageBoxButtons, MessageBoxIcon)
from System.Drawing import (Font as _Font, Icon as _Icon, Point as _Point, Size as _Size,FontStyle)



class ComboCheckboxListSelector(_Form):
	"""Checked Box List Selector"""

	def __init__(self,title,items):
		
		# icon
		#self.Icon = _Icon(r"%s\extra\icon.ico" %ipath)
		self.Size = _Size(250,250)
		self.Text = "Quasar"
		self.class2Result = [];
		
		self.title = title
		self.items = items
		# fonts
		self.gsmt_11r = _Font("Georgia", 11)
		self.gsmt_10r = _Font("Georgia",10)
		
		# title label
		self.lab = Label()
		self.lab.Text = "Select Room By Status"
		self.lab.Location = _Point(10,10)
		self.lab.Size = _Size(250,25)
		self.lab.Font = self.gsmt_11r
		self.Controls.Add(self.lab)
		
		# checklist box
		self.lstbox = CheckedListBox()
		self.lstbox.Items.AddRange(tuple(title))
		self.lstbox.Font = self.gsmt_10r
		# padding
		self.lstbox.Padding = Padding(30)
		# select one click
		self.lstbox.CheckOnClick = True

		self.FormBorderStyle = FormBorderStyle.FixedDialog
		self.MaximizeBox = False;
		self.ManimizeBox = False;
		self.lstbox.Location = _Point(10,45)
		self.lstbox.Size = _Size(210,110)

		# auto horizontal scrollbar
		self.lstbox.HorizontalScrollbar = True
		self.Controls.Add(self.lstbox)

		# select all btn
		self.btn_all = Button()
		self.btn_all.Text = "All"
		self.btn_all.Font = self.gsmt_10r
		self.btn_all.Size = _Size(65,25)
		self.btn_all.Location = _Point(10,165)
		self.Controls.Add(self.btn_all)

		# select none btn
		self.btn_none = Button()
		self.btn_none.Text = "None"
		self.btn_none.Font = self.gsmt_10r
		self.btn_none.Size = _Size(65,25)
		self.btn_none.Location = _Point(160,165)
		self.Controls.Add(self.btn_none)

		# ok btn
		self.btn = Button()
		self.btn.Text = "OK"
		self.btn.Font = self.gsmt_10r
		self.btn.Size = _Size(65,25)
		self.btn.Location = _Point(85,165)
		self.Controls.Add(self.btn)
		
		

		# events
		self.btn_all.Click += self.click_all
		self.btn_none.Click += self.click_none
		self.btn.Click += self.click_ok 

		# pop up from center
		self.CenterToScreen()

	def click_ok(self, sender, event):	
	
		if len(self.lstbox.CheckedItems) &lt; 1:
			return MessageBox.Show("No element selected!", "Quasar Info Box", MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
						
		self.class2Result = self.lstbox.CheckedItems
		
		return self.Close()		

	def click_all(self, sender, event):
		for i in range(len(self.lstbox.Items)):
			self.lstbox.SetItemChecked(i,True)

	def click_none(self, sender, event):
		for i in range(len(self.lstbox.Items)):
			self.lstbox.SetItemChecked(i,False)


doc = DocumentManager.Instance.CurrentDBDocument

rooms = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).ToElements()

# room status list for output
placed,notplaced,notenclosed,redundant = [],[],[],[]

# loop rooms
for r in rooms:
	# get room boundary need one argument(opts)
	s = r.GetBoundarySegments(SpatialElementBoundaryOptions())
	# get location of room
	l = r.Location
	# if location is none
	if l == None:
		# append to not placed
		notplaced.append(r)
	# elif no boundary segments
	elif len(s)&lt;1:
		# append to not enclosed
		notenclosed.append(r)
	# elif area zero
	elif r.Area == 0:
		# append to redundant
		redundant.append(r)
	# passed all conditions
	else:
		# append to placed
		placed.append(r)

titles = ["Placed Rooms","Unplaced Rooms","Not Enclosed","Redundant"]
items = [placed,notplaced,notenclosed,redundant]
ui = ComboCheckboxListSelector(titles,items)
Application.Run(ui)
res =[]
selected = ui.class2Result
for i in selected:
	idx = titles.index(i)
	res.append(items[idx])

OUT = res





</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors />
  <Notes>
    <Dynamo.Graph.Notes.NoteModel guid="de10f882-f534-49bb-8053-0213d3b334ad" text="Returns;&#xD;&#xA;OUT[0] = Placed rooms;&#xD;&#xA;OUT[1] = Unplaced rooms;&#xD;&#xA;OUT[2] = Not Enclosed rooms;&#xD;&#xA;OUT[3] = Redundant rooms;" x="277.653256341391" y="19.3388713193746" />
  </Notes>
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="1fdd498a-812d-428d-9373-7e571d49aca8" annotationText="RoomsCollectorUI" left="267.653256341391" top="-26.6611286806254" width="291.588343559334" height="236.178732502838" fontSize="30" InitialTop="19.3388713193746" InitialHeight="220.178732502839" TextblockHeight="36" backgrouund="#FFA4E1FF">
      <Models ModelGuid="c0435390-ff88-4c3a-a8d7-933928038d1b" />
      <Models ModelGuid="de10f882-f534-49bb-8053-0213d3b334ad" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>