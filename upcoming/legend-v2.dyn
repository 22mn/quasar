<Workspace Version="1.3.2.2480" X="-17.6319178704381" Y="-297.68625293247" zoom="0.799200302816085" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="a0efc28c-98d5-467c-bdc3-3bf7feadfe00" type="PythonNodeModels.PythonNode" nickname="Python Script" x="280.642623575869" y="588.796628773774" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="0">
      <Script># dynamo version - 1.3.0 
# author - min.naung@mgjean https://twentytwopaths.wordpress.com/contact/


import clr
clr.AddReference("RevitAPI")
clr.AddReference("RevitServices")

from Autodesk.Revit.DB import *
from RevitServices.Persistence import DocumentManager

doc = DocumentManager.Instance.CurrentDBDocument;
link_docs = FilteredElementCollector(doc).OfClass(RevitLinkInstance);

OUT = [[i.Name.split(":")[0],i.GetLinkDocument()] for i in link_docs];
</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="b4e46980-fe6e-429b-a53b-7a40b8491676" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="473.448754052149" y="624.252712807787" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="i[0][1];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <PythonNodeModels.PythonNode guid="cd95b9ae-9ecf-48a5-9c00-9cb055a92cf8" type="PythonNodeModels.PythonNode" nickname="TransferLegend" x="1039.23900661461" y="550.696599824508" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="true" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script># dynamo version - 1.3.2
# author - min.naung/mgjean https://twentytwo.space/contact

import clr,sys
sys.path.append(r"C:\Program Files (x86)\IronPython 2.7\Lib")
import os, System

clr.AddReference("RevitAPI")
clr.AddReference("RevitServices")

from Autodesk.Revit.DB import *
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

version = ["2.0","1.3","1.2","1.1","1.0","0.9","0.8","0.7"]

appdata = os.getenv("AppData");
qpath = r"\Dynamo\Dynamo Revit\%s\packages\Quasar"

for i in version:
	if os.path.exists(os.path.join(appdata+qpath %i)):
		ipath = os.path.join(appdata+qpath %i)

clr.AddReference("System.Windows.Forms")
clr.AddReference("System.Drawing")


from System.Collections.Generic import List
from System.Windows.Forms import (Application, Button, ComboBox, CheckBox, Form as _Form,
CheckedListBox,Padding,FormBorderStyle, SelectionMode,Label, MessageBox,MessageBoxButtons, MessageBoxIcon)
from System.Drawing import (Font as _Font, Icon as _Icon, Point as _Point, Size as _Size,FontStyle)

doc = DocumentManager.Instance.CurrentDBDocument

linkdoc = IN[0]


# collect view from link document
collector = FilteredElementCollector(linkdoc).OfClass(View).ToElements()
# collect view template
views = [v for v in collector if v.ViewType== ViewType.Legend]
views_name = [v.Name for v in views]
ids = [v.Id for v in views]
views_ids_dict = {k:v for k,v in zip(views_name,ids)}


class CheckedBoxListSelector(_Form):
	"""Checked Box List Selector"""
	
	def __init__(self,inputList):
		self.Icon = _Icon(r"%s\extra\icon.ico" %ipath)
		self.Size = _Size(370,435)
		self.Text = "Quasar"
		self.class1Result = [];

		# fonts
		self.gsmt_11r = _Font("Georgia", 10)
		self.gsmt_10r = _Font("Georgia",9)

		# label
		self.label = Label()
		self.label.Text = "Select Legend View: "
		self.label.Font = self.gsmt_11r
		self.label.Location = _Point(30,10)
		self.label.Size = _Size(220,28)
		self.Controls.Add(self.label)

		# checklist box
		self.lstbox = CheckedListBox()
		self.lstbox.Items.AddRange(tuple(inputList))
		self.lstbox.Font = self.gsmt_10r
		# padding
		self.lstbox.Padding = Padding(30)
		# select one click
		self.lstbox.CheckOnClick = True

		self.FormBorderStyle = FormBorderStyle.FixedDialog
		self.MaximizeBox = False;
		self.ManimizeBox = False;
		self.lstbox.Location = _Point(30,40)
		self.lstbox.Size = _Size(290,280)

		# auto horizontal scrollbar
		self.lstbox.HorizontalScrollbar = True
		self.Controls.Add(self.lstbox)

		# select all btn
		self.btn_all = Button()
		self.btn_all.Text = "Select All"
		self.btn_all.Font = self.gsmt_10r
		self.btn_all.Size = _Size(95,25)
		self.btn_all.Location = _Point(30,350)
		self.Controls.Add(self.btn_all)

		# select none btn
		self.btn_none = Button()
		self.btn_none.Text = "Select None"
		self.btn_none.Font = self.gsmt_10r
		self.btn_none.Size = _Size(95,25)
		self.btn_none.Location = _Point(225,350)
		self.Controls.Add(self.btn_none)

		# ok btn
		self.btn = Button()
		self.btn.Text = "OK"
		self.btn.Font = self.gsmt_10r
		self.btn.Size = _Size(80,25)
		self.btn.Location = _Point(135,350)
		self.Controls.Add(self.btn)

		# events
		self.btn_all.Click += self.click_all
		self.btn_none.Click += self.click_none
		self.btn.Click += self.click_ok 

		# pop up from center
		self.CenterToScreen()

	def click_ok(self, sender, event):
		#global res
		if len(self.lstbox.Items) &lt; 1:
			self.Close()
		if len(self.lstbox.CheckedItems) &lt; 1:
			return MessageBox.Show("No element selected!", "Quasar Info Box", MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
		
		self.class1Result = self.lstbox.CheckedItems;
		
		return self.Close();			

	def click_all(self, sender, event):
		for i in range(len(self.lstbox.Items)):
			self.lstbox.SetItemChecked(i,True)

	def click_none(self, sender, event):
		for i in range(len(self.lstbox.Items)):
			self.lstbox.SetItemChecked(i,False);

# instantiate class
ui = CheckedBoxListSelector(views_name)
# run class
Application.Run(ui)
# extract selected value
selected = ui.class1Result


# dot-net elementId list
dotList = List[ElementId]([views_ids_dict[i] for i in selected]);
# view_ids
views_ids = [views_ids_dict[i] for i in selected]
# transaction start
TransactionManager.Instance.EnsureInTransaction(doc)


copy_views = ElementTransformUtils.CopyElements(linkdoc,dotList,doc,Transform.Identity,CopyPasteOptions())

	
TransactionManager.Instance.TransactionTaskDone()

OUT = views_ids,copy_views








</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="280a3e10-6b19-4395-bc70-fac8161c429e" type="PythonNodeModels.PythonNode" nickname="Python Script" x="1183.51474005422" y="678.475089514373" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script># dynamo version - 1.3.2
# author - min.naung/mgjean https://twentytwo.space/contact


import clr
clr.AddReference('RevitAPI')
clr.AddReference("RevitServices")
import System
from Autodesk.Revit.DB import *
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import List
# get current document 
doc = DocumentManager.Instance.CurrentDBDocument


linkdoc = IN[0]
link_legend = IN[1]
doc_legend = IN[2]
view_names = []

result = []

TransactionManager.Instance.EnsureInTransaction(doc)

for l, d in zip(link_legend,doc_legend):
	view = linkdoc.GetElement(l)
	view_copy = doc.GetElement(d)
	view_names.append(str(view_copy.ViewName))
	
	elements = FilteredElementCollector(linkdoc,l).ToElements()
	element_ids = []
	for e in elements:
		try:
			element_ids.append(e.Id)
		except:
			continue
	elemIdList = List[ElementId](element_ids)
	copy_element = ElementTransformUtils.CopyElements(view,elemIdList,view_copy,Transform.Identity,CopyPasteOptions())
	doc.Delete(d)

views = FilteredElementCollector(doc).OfClass(View).ToElements()
legends = [v for v in views if v.ViewType == ViewType.Legend]
res = []
for i in legends:
	for j in view_names:
		if j[-1].isdigit():
			if j[:-1] == str(i.ViewName)[:-1]:
				i.ViewName = j
				res.append(i)				
		else:			
			if j[:-1] == str(i.ViewName)[:-2]:
				i.ViewName = j
				res.append(i)
			
TransactionManager.Instance.TransactionTaskDone()

OUT = res


</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="764b7e3b-a567-48f6-84ee-482d057408d2" type="PythonNodeModels.PythonNode" nickname="Python Script" x="404.171543970497" y="796.265853639743" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
clr.AddReference('RevitAPI')
clr.AddReference("RevitServices")
import System
from Autodesk.Revit.DB import *
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import List
# get current document 
doc = DocumentManager.Instance.CurrentDBDocument


linkdoc = IN[0]


# collect view from link document
collector = FilteredElementCollector(linkdoc).OfClass(View).ToElements()
# collect view template
views = [v for v in collector if v.ViewType== ViewType.Legend]
views_name = [v.Name for v in views]
views_ids = [v.Id for v in views]
dotList = List[ElementId](views_ids)
#views_ids_dict = {k:v for k,v in zip(views_name,ids)}

TransactionManager.Instance.EnsureInTransaction(doc)

#copy_views = ElementTransformUtils.CopyElements(linkdoc,dotList,doc,Transform.Identity,CopyPasteOptions())


for l in views_ids:
	view = linkdoc.GetElement(l)
	
	elements = FilteredElementCollector(linkdoc,l).ToElements()
	element_ids = []
	for e in elements:
		try:
			element_ids.append(e.Id)
		except:
			continue
	elemIdList = List[ElementId](element_ids)
	copy_element = ElementTransformUtils.CopyElements(linkdoc,elemIdList,doc,Transform.Identity,CopyPasteOptions())

	
TransactionManager.Instance.TransactionTaskDone()
views = FilteredElementCollector(doc).OfClass(View).ToElements()

OUT = views

</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="d5fcb435-c5e9-442e-921f-89f05ad3714d" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="962.335252874202" y="758.974767030838" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="i[0];&#xA;i[1];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="a0efc28c-98d5-467c-bdc3-3bf7feadfe00" start_index="0" end="b4e46980-fe6e-429b-a53b-7a40b8491676" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b4e46980-fe6e-429b-a53b-7a40b8491676" start_index="0" end="cd95b9ae-9ecf-48a5-9c00-9cb055a92cf8" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b4e46980-fe6e-429b-a53b-7a40b8491676" start_index="0" end="764b7e3b-a567-48f6-84ee-482d057408d2" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b4e46980-fe6e-429b-a53b-7a40b8491676" start_index="0" end="280a3e10-6b19-4395-bc70-fac8161c429e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="cd95b9ae-9ecf-48a5-9c00-9cb055a92cf8" start_index="0" end="d5fcb435-c5e9-442e-921f-89f05ad3714d" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d5fcb435-c5e9-442e-921f-89f05ad3714d" start_index="0" end="280a3e10-6b19-4395-bc70-fac8161c429e" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d5fcb435-c5e9-442e-921f-89f05ad3714d" start_index="1" end="280a3e10-6b19-4395-bc70-fac8161c429e" end_index="2" portType="0" />
  </Connectors>
  <Notes>
    <Dynamo.Graph.Notes.NoteModel guid="04efa11b-e655-4db8-bbcf-c5070e2b4531" text="Each list includes [DocumentName, Document]" x="358.4" y="460.8" />
  </Notes>
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="4515.37646484375" eyeY="3164.48828125" eyeZ="3077.32080078125" lookX="1058.88610839844" lookY="-3469.67993164063" lookZ="-5117.94970703125" upX="0.0732671618461609" upY="0.932323813438416" upZ="-0.354124635457993" />
  </Cameras>
</Workspace>