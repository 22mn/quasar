<Workspace Version="1.3.2.2480" X="253.500674717353" Y="138.377994846335" zoom="0.82770257044119" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="False">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="5ff82996-ddbc-4db6-94d4-bdcfacd996f9" type="PythonNodeModels.PythonNode" nickname="Python Script" x="168.890609149767" y="100.724991764821" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>'''
HIDE / UNHIDE - LEVELS AND GRIDS FROM LINKS DOCUMENTS
'''
__author__ = 'min.naung/mgjean @https://twentytwo.space/contact'
__twitter__ = '@_mgjean'
__version__ ='1.0.0'

# tested dynamo version - 1.x.x , 2.x.x

# import common language runtime 
import clr

# clr.AddReference loads and imports .net assembly(dll) as module
# load RevitAPI.dll and RevitServices.dll
clr.AddReference('RevitAPI')
clr.AddReference('RevitServices')

# import system for dotnet List
import System
from System.Collections.Generic import List

# import all classes from Revit DB
from Autodesk.Revit.DB import *
# import document manager
from RevitServices.Persistence import DocumentManager
# import transaction manager
from RevitServices.Transactions import TransactionManager
# instantiate current document
doc = DocumentManager.Instance.CurrentDBDocument

# start transaction
TransactionManager.Instance.EnsureInTransaction(doc)

# active view
active_view = doc.ActiveView

# filter name "can name anything"
ifilter = 'GiveFilterAName'

endWiths = 'Anything'

# filter check
found = False

# input[0] boolean
hide = False if IN[0] else True


# collect floor plans and ceiling plans views
plans_views = FilteredElementCollector(doc).OfClass(ViewPlan).ToElements()
# collect elevations and sections views
sects_elevs_views = FilteredElementCollector(doc).OfClass(ViewSection).ToElements()
# combine list two view list
views = list(plans_views)
views.extend(sects_elevs_views)


# collect all filter elements
allFilters = FilteredElementCollector(doc).OfClass(FilterElement).ToElements()

# get filters from current view
viewFilters = active_view.GetFilters()
# collect filters' names
viewFiltersName = [doc.GetElement(i).Name.ToString() for i in viewFilters]

# ifilter element
ifilter_elem = [filter for filter in allFilters if ifilter == filter.Name.ToString()]


if ifilter_elem:
	found = True
	for view in views:
		try:
			# add filter
			view.AddFilter(ifilter_elem[0].Id)
			# set filter visibility
			view.SetFilterVisibility(ifilter_elem[0].Id, hide)
		except:
			# set filter visibility
			view.SetFilterVisibility(ifilter_elem[0].Id, hide)
			# already applied
			pass


		
# if filter not found in doc
if not found:
	# all grids in doc
	grids = FilteredElementCollector(doc).OfClass(Grid).ToElements()
	# all levels in doc
	levels = FilteredElementCollector(doc).OfClass(Level).ToElements()
	# collect category id from grid and level
	CateIds = List[ElementId]([grids[0].Category.Id,levels[0].Category.Id])
	
	# type ids from grids 
	gridTypeIds = set([i.GetTypeId() for i in grids])
	# type ids from levels
	levelTypeIds = set([i.GetTypeId() for i in levels])
	
	# get grid type element
	type_elems = [doc.GetElement(i) for i in gridTypeIds]
	# get level type element
	type_elems.extend([doc.GetElement(l) for l in levelTypeIds])
	
	# loop type elements
	for elem in type_elems:
		# if endwiths not include in type name
		if not endWiths in elem.LookupParameter('Type Name').AsString():
			# add endwiths in type name
			elem.Name = elem.LookupParameter('Type Name').AsString() + endWiths
	# get type names
	type_names = [i.LookupParameter('Type Name').AsString() for i in type_elems]
	# type name parameter id
	paramId = type_elems[0].LookupParameter('Type Name').Id
	# create a "not ends with" filter rule
	notendswith = ParameterFilterRuleFactory.CreateNotEndsWithRule(paramId,endWiths,False)
	# create parameter filter element
	paramFilterElem = ParameterFilterElement.Create(doc, ifilter,CateIds,[notendswith])
	
	# for all views
	for view in views:
		# set filter overrides (same with add filter)
		view.SetFilterOverrides(paramFilterElem.Id, OverrideGraphicSettings())
		# set filter visibility
		view.SetFilterVisibility(paramFilterElem.Id, hide)
	
# transaction done
TransactionManager.Instance.TransactionTaskDone()

# output
OUT = 'DONE!'</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="29b71305-183a-46a2-a703-2f6c0ea2cfb6" type="PythonNodeModels.PythonNode" nickname="Python Script" x="248.700288766004" y="284.00542730765" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="true" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script># import common language runtime 
import clr

# clr.AddReference loads and imports .net assembly(dll) as module
# load RevitAPI.dll and RevitServices.dll
clr.AddReference("RevitAPI")
clr.AddReference("RevitServices")

# import system for dotnet List
import System
from System.Collections.Generic import List

# import all classes from Revit DB
from Autodesk.Revit.DB import *
# import document manager
from RevitServices.Persistence import DocumentManager
# import transaction manager
from RevitServices.Transactions import TransactionManager
# instantiate current document
doc = DocumentManager.Instance.CurrentDBDocument

# collect floor plans and ceiling plans views
plans_views = FilteredElementCollector(doc).OfClass(ViewPlan).ToElements()
# collect elevations and sections views
sects_elevs_views = FilteredElementCollector(doc).OfClass(ViewSection).ToElements()
# combine list two view list
views = list(plans_views)
views.extend(sects_elevs_views)

OUT = views</Script>
    </PythonNodeModels.PythonNode>
    <CoreNodeModels.Input.BoolSelector guid="b8c66d17-ec1b-4138-96c4-5e5f039845d4" type="CoreNodeModels.Input.BoolSelector" nickname="Boolean" x="-45.0388871070647" y="108.577863939012" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.Boolean>True</System.Boolean>
    </CoreNodeModels.Input.BoolSelector>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="b8c66d17-ec1b-4138-96c4-5e5f039845d4" start_index="0" end="5ff82996-ddbc-4db6-94d4-bdcfacd996f9" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="045bea8e-6895-4325-9cb7-72e76efcff22" annotationText="" left="158.890609149767" top="54.724991764821" width="144.8" height="138.6" fontSize="30" InitialTop="100.724991764821" InitialHeight="199.779185895626" TextblockHeight="36" backgrouund="#FFD8D8D8">
      <Models ModelGuid="5ff82996-ddbc-4db6-94d4-bdcfacd996f9" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>